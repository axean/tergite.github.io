[
  {
    "objectID": "tutorials/04_resource_allocation_&_management.html",
    "href": "tutorials/04_resource_allocation_&_management.html",
    "title": "Resource Allocation & Management",
    "section": "",
    "text": "TODO\n\n\n\n Back to top",
    "crumbs": [
      "Tutorials",
      "Resource Allocation & Management"
    ]
  },
  {
    "objectID": "tutorials/03_configuration.html",
    "href": "tutorials/03_configuration.html",
    "title": "Configuration",
    "section": "",
    "text": "TODO\n\n\n\n Back to top",
    "crumbs": [
      "Tutorials",
      "Configuration"
    ]
  },
  {
    "objectID": "examples/03_equal_superposition.html",
    "href": "examples/03_equal_superposition.html",
    "title": "Equal Superposition",
    "section": "",
    "text": "This is a showcase of connecting to tergite via the tergite SDK, running a basic one-qubit circuit to produce the equal superposition state \\(|\\Psi\\rangle = |0\\rangle + |1\\rangle\\), and retrieving the measurement results.",
    "crumbs": [
      "Examples",
      "Equal Superposition"
    ]
  },
  {
    "objectID": "examples/03_equal_superposition.html#install-dependencies",
    "href": "examples/03_equal_superposition.html#install-dependencies",
    "title": "Equal Superposition",
    "section": "Install dependencies",
    "text": "Install dependencies\nThis example depends on:\n\nqiskit\ntergite\n\nInstall these dependencies\n\n%pip install qiskit\n%pip install tergite",
    "crumbs": [
      "Examples",
      "Equal Superposition"
    ]
  },
  {
    "objectID": "examples/03_equal_superposition.html#import-the-basic-dependencies",
    "href": "examples/03_equal_superposition.html#import-the-basic-dependencies",
    "title": "Equal Superposition",
    "section": "Import the basic dependencies",
    "text": "Import the basic dependencies\n\nimport time\nimport qiskit.circuit as circuit\nimport qiskit.compiler as compiler\nfrom tergite.qiskit.providers import Tergite\nfrom tergite.qiskit.providers.provider_account import ProviderAccount",
    "crumbs": [
      "Examples",
      "Equal Superposition"
    ]
  },
  {
    "objectID": "examples/03_equal_superposition.html#configure-session",
    "href": "examples/03_equal_superposition.html#configure-session",
    "title": "Equal Superposition",
    "section": "Configure Session",
    "text": "Configure Session\nBefore we get any further, we will take the time to define some of the parameters we will use for our tergite job.\n\n# the Tergite API URL e.g. \"https://api.tergite.example\"\nAPI_URL = \"https://api.qal9000.se\"\n# API token for connecting to tergite\nAPI_TOKEN = \"API-TOKEN\"\n# The name of the Quantum Computer to use from the available quantum computers\nBACKEND_NAME = \"SimulatorC\"\n# the name of this service. For your own bookkeeping.\nSERVICE_NAME = \"local\"\n# the timeout in seconds for how long to keep checking for results\nPOLL_TIMEOUT = 300",
    "crumbs": [
      "Examples",
      "Equal Superposition"
    ]
  },
  {
    "objectID": "examples/03_equal_superposition.html#get-the-tergite-backend",
    "href": "examples/03_equal_superposition.html#get-the-tergite-backend",
    "title": "Equal Superposition",
    "section": "Get the Tergite Backend",
    "text": "Get the Tergite Backend\nThe backend object can now be obtained. A detailed list of the backend properties — such as the available gate set, coupling map and number of qubits — is availablde by printing the backend object.\n\n# provider account creation can be skipped in case you already saved\n# your provider account to the `~/.qiskit/tergiterc` file.\n# See below how that is done.\naccount = ProviderAccount(service_name=SERVICE_NAME, url=API_URL, token=API_TOKEN)\n\nprovider = Tergite.use_provider_account(account)\n# to save this account to the `~/.qiskit/tergiterc` file, add the `save=True`\n# provider = Tergite.use_provider_account(account, save=True)\n\n# Get the tergite backend in case you skipped provider account creation\n# provider = Tergite.get_provider(service_name=SERVICE_NAME)\nbackend = provider.get_backend(BACKEND_NAME)\nbackend.set_options(shots=1024)\nprint(backend)",
    "crumbs": [
      "Examples",
      "Equal Superposition"
    ]
  },
  {
    "objectID": "examples/03_equal_superposition.html#create-the-qiskit-circuit",
    "href": "examples/03_equal_superposition.html#create-the-qiskit-circuit",
    "title": "Equal Superposition",
    "section": "Create the Qiskit Circuit",
    "text": "Create the Qiskit Circuit\nTo test our connection, we will implement a short test circuit. The circuit we will run produces the equal superposition state \\(|\\Psi\\rangle = |0\\rangle + |1\\rangle\\).\n\nqc = circuit.QuantumCircuit(1)\nqc.h(0)\n\nWe can visualize and verify our circuit with Qiskit’s built in draw() method. The output format of qc.draw() can be changed, see https://docs.quantum.ibm.com/build/circuit-visualization. Note the added measurement and corresponding classical bit register meas_0.\n\nqc.draw()\n\nTo measure the prepared Bell state we add explicit measurements to all qubits using qc.measure_all(). This will perform a meaurement in the so-called computational basis, \\(\\langle q|Z|q\\rangle\\), mapping the eigenvalues \\(\\{-1,1\\}\\) to the classical binary values \\(\\{0,1\\}\\). Drawing the final circuit shows the additional measurement operations and the classical bit register meas.\n\nqc.measure_all()\nqc.draw()",
    "crumbs": [
      "Examples",
      "Equal Superposition"
    ]
  },
  {
    "objectID": "examples/03_equal_superposition.html#compile-circuit",
    "href": "examples/03_equal_superposition.html#compile-circuit",
    "title": "Equal Superposition",
    "section": "Compile Circuit",
    "text": "Compile Circuit\nIn order to execute the circuit on physical hardware, the circuit needs to be compiled (or transpiled) to the target architecture. At the least, transpilation accounts for the QPU’s native gate set and the qubit connectivity on the QPU. Many transpilers also offer some level of optimization, reducing the circuit size.\n\ntc = compiler.transpile(qc, backend=backend)\ntc.draw()",
    "crumbs": [
      "Examples",
      "Equal Superposition"
    ]
  },
  {
    "objectID": "examples/03_equal_superposition.html#run-the-circuit",
    "href": "examples/03_equal_superposition.html#run-the-circuit",
    "title": "Equal Superposition",
    "section": "Run the Circuit",
    "text": "Run the Circuit\nOnce the cicruit has been compiled to the native gate set and connectivity, we use it to submit a job to the backend.\n\njob = backend.run(tc, meas_level=2, meas_return=\"single\")",
    "crumbs": [
      "Examples",
      "Equal Superposition"
    ]
  },
  {
    "objectID": "examples/03_equal_superposition.html#see-the-results",
    "href": "examples/03_equal_superposition.html#see-the-results",
    "title": "Equal Superposition",
    "section": "See the Results",
    "text": "See the Results\nWhen the job has been submitted, we will need to wait potential queue time and time required to execute the job.\n\nelapsed_time = 0\nresult = None\nwhile result is None:\n    if elapsed_time &gt; POLL_TIMEOUT:\n        raise TimeoutError(f\"result polling timeout {POLL_TIMEOUT} seconds exceeded\")\n\n    time.sleep(1)\n    elapsed_time += 1\n    result = job.result()\n\nresult.get_counts()",
    "crumbs": [
      "Examples",
      "Equal Superposition"
    ]
  },
  {
    "objectID": "examples/03_equal_superposition.html#acknowledgement",
    "href": "examples/03_equal_superposition.html#acknowledgement",
    "title": "Equal Superposition",
    "section": "Acknowledgement",
    "text": "Acknowledgement\nThis notebook was prepared by:\n\nMårten Skogh\nMartin Ahindura",
    "crumbs": [
      "Examples",
      "Equal Superposition"
    ]
  },
  {
    "objectID": "examples/01_hello_tergite.html",
    "href": "examples/01_hello_tergite.html",
    "title": "Hello Tergite",
    "section": "",
    "text": "This is a showcase of connecting to tergite via the tergite and running a basic circuit.",
    "crumbs": [
      "Examples",
      "Hello Tergite"
    ]
  },
  {
    "objectID": "examples/01_hello_tergite.html#install-dependencies",
    "href": "examples/01_hello_tergite.html#install-dependencies",
    "title": "Hello Tergite",
    "section": "Install dependencies",
    "text": "Install dependencies\nThis example depends on:\n\nqiskit\ntergite\n\n\n%pip install qiskit\n%pip install tergite",
    "crumbs": [
      "Examples",
      "Hello Tergite"
    ]
  },
  {
    "objectID": "examples/01_hello_tergite.html#import-the-basic-dependencies",
    "href": "examples/01_hello_tergite.html#import-the-basic-dependencies",
    "title": "Hello Tergite",
    "section": "Import the basic dependencies",
    "text": "Import the basic dependencies\n\nimport time\nimport qiskit.circuit as circuit\nimport qiskit.compiler as compiler\nfrom tergite.qiskit.providers import Tergite\nfrom tergite.qiskit.providers.provider_account import ProviderAccount",
    "crumbs": [
      "Examples",
      "Hello Tergite"
    ]
  },
  {
    "objectID": "examples/01_hello_tergite.html#update-some-variables",
    "href": "examples/01_hello_tergite.html#update-some-variables",
    "title": "Hello Tergite",
    "section": "Update Some Variables",
    "text": "Update Some Variables\n\n# the Tergite API URL e.g. \"https://api.tergite.example\"\nAPI_URL = \"https://api.qal9000.se\"\n# API token for connecting to tergite\nAPI_TOKEN = \"&lt;your Tergite API key &gt;\"\n# The name of the Quantum Computer to use from the available quantum computers\nBACKEND_NAME = \"SimulatorC\"\n# the name of this service. For your own bookkeeping.\nSERVICE_NAME = \"local\"\n# the timeout in seconds for how long to keep checking for results\nPOLL_TIMEOUT = 100",
    "crumbs": [
      "Examples",
      "Hello Tergite"
    ]
  },
  {
    "objectID": "examples/01_hello_tergite.html#create-the-qiskit-circuit",
    "href": "examples/01_hello_tergite.html#create-the-qiskit-circuit",
    "title": "Hello Tergite",
    "section": "Create the Qiskit Circuit",
    "text": "Create the Qiskit Circuit\n\nqc = circuit.QuantumCircuit(1)\nqc.x(0)\nqc.h(0)\nqc.measure_all()\nqc.draw()",
    "crumbs": [
      "Examples",
      "Hello Tergite"
    ]
  },
  {
    "objectID": "examples/01_hello_tergite.html#get-the-tergite-backend",
    "href": "examples/01_hello_tergite.html#get-the-tergite-backend",
    "title": "Hello Tergite",
    "section": "Get the Tergite Backend",
    "text": "Get the Tergite Backend\n\n# provider account creation can be skipped in case you already saved\n# your provider account to the `~/.qiskit/tergiterc` file.\n# See below how that is done.\naccount = ProviderAccount(service_name=SERVICE_NAME, url=API_URL, token=API_TOKEN)\n\nprovider = Tergite.use_provider_account(account)\n# to save this account to the `~/.qiskit/tergiterc` file, add the `save=True`\n# provider = Tergite.use_provider_account(account, save=True)\n\n# Get the tergite backend in case you skipped provider account creation\n# provider = Tergite.get_provider(service_name=SERVICE_NAME)\nbackend = provider.get_backend(BACKEND_NAME)\nbackend.set_options(shots=1024)\nbackend",
    "crumbs": [
      "Examples",
      "Hello Tergite"
    ]
  },
  {
    "objectID": "examples/01_hello_tergite.html#compile-circuit",
    "href": "examples/01_hello_tergite.html#compile-circuit",
    "title": "Hello Tergite",
    "section": "Compile Circuit",
    "text": "Compile Circuit\n\ntc = compiler.transpile(qc, backend=backend)\ntc.draw()",
    "crumbs": [
      "Examples",
      "Hello Tergite"
    ]
  },
  {
    "objectID": "examples/01_hello_tergite.html#run-the-circuit",
    "href": "examples/01_hello_tergite.html#run-the-circuit",
    "title": "Hello Tergite",
    "section": "Run the Circuit",
    "text": "Run the Circuit\n\njob = backend.run(tc, meas_level=2, meas_return=\"single\")\n\nTergite: Job has been successfully submitted",
    "crumbs": [
      "Examples",
      "Hello Tergite"
    ]
  },
  {
    "objectID": "examples/01_hello_tergite.html#see-the-results",
    "href": "examples/01_hello_tergite.html#see-the-results",
    "title": "Hello Tergite",
    "section": "See the Results",
    "text": "See the Results\n\nelapsed_time = 0\nresult = None\nwhile result is None:\n    if elapsed_time &gt; POLL_TIMEOUT:\n        raise TimeoutError(f\"result polling timeout {POLL_TIMEOUT} seconds exceeded\")\n\n    time.sleep(1)\n    elapsed_time += 1\n    result = job.result()\n\nresult.get_counts()",
    "crumbs": [
      "Examples",
      "Hello Tergite"
    ]
  },
  {
    "objectID": "examples/01_hello_tergite.html#acknowledgement",
    "href": "examples/01_hello_tergite.html#acknowledgement",
    "title": "Hello Tergite",
    "section": "Acknowledgement",
    "text": "Acknowledgement\nThis notebook was prepared by:\n\nStefan Hill\nMartin Ahindura",
    "crumbs": [
      "Examples",
      "Hello Tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html",
    "href": "contributing/guidelines.html",
    "title": "Contributing to tergite",
    "section": "",
    "text": "This project is currently not accepting pull requests from the general public yet.\nIt is currently being developed by the core developers only.\nWe love your input! We want to make contributing to this project as easy and transparent as possible, whether it’s:\n\nReporting a bug\nDiscussing the current state of the code\nSubmitting a fix\nProposing new features\nBecoming a maintainer\n\n\n\nChalmers Next Labs AB (CNL) manages and maintains this project on behalf of all contributors.\n\n\n\nTergite is developed on a separate version control system and mirrored on Github. If you are reading this on GitHub, then you are looking at a mirror.\n\n\n\nSince the Github repositories are only mirrors, no Github pull requests or Github issue/bug reports are looked at. Please get in touch via email quantum.nextlabs@chalmers.se instead.\nTake note that the maintainers may not answer every email.\n\n\n\nPull requests are the best way to propose changes to the codebase (we use Github Flow). We actively welcome your pull requests:\n\nClone the repo and create your branch from main.\nIf you’ve added code that should be tested, add tests.\nIf you’ve changed APIs, update the documentation.\nEnsure the test suite passes.\nMake sure your code lints.\nIssue that pull request!\n\n\n\n\nIn short, when you submit code changes, your submissions are understood to be under the same Apache 2.0 License that covers the project. Feel free to contact the maintainers if that’s a concern.\n\n\n\nThis is an example. Here’s another example from Craig Hockenberry.\nGreat Bug Reports tend to have:\n\nA quick summary and/or background\nSteps to reproduce\n\nBe specific!\nGive sample code if you can.\n\nWhat you expected would happen\nWhat actually happens\nNotes (possibly including why you think this might be happening, or stuff you tried that didn’t work)\n\nPeople love thorough bug reports. I’m not even kidding.\n\n\n\nBy contributing, you agree that your contributions will be licensed under its Apache 2.0 License.\n\n\n\nBefore you can submit any code, all contributors must sign a contributor license agreement (CLA). By signing a CLA, you’re attesting that you are the author of the contribution, and that you’re freely contributing it under the terms of the Apache-2.0 license.\n“The individual CLA document is available for review as a PDF.\nPlease note that if your contribution is part of your employment or your contribution is the property of your employer, you will also most likely need to sign a corporate CLA.\nAll signed CLAs are emails to us at quantum.nextlabs@chalmers.se.”\n\n\n\nThis document was adapted from a gist by Brian A. Danielak which was originally adapted from the open-source contribution guidelines for Facebook’s Draft",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#government-model",
    "href": "contributing/guidelines.html#government-model",
    "title": "Contributing to tergite",
    "section": "",
    "text": "Chalmers Next Labs AB (CNL) manages and maintains this project on behalf of all contributors.",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#version-control",
    "href": "contributing/guidelines.html#version-control",
    "title": "Contributing to tergite",
    "section": "",
    "text": "Tergite is developed on a separate version control system and mirrored on Github. If you are reading this on GitHub, then you are looking at a mirror.",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#contacting-the-tergite-developers",
    "href": "contributing/guidelines.html#contacting-the-tergite-developers",
    "title": "Contributing to tergite",
    "section": "",
    "text": "Since the Github repositories are only mirrors, no Github pull requests or Github issue/bug reports are looked at. Please get in touch via email quantum.nextlabs@chalmers.se instead.\nTake note that the maintainers may not answer every email.",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#but-we-use-github-flow-so-all-code-changes-happen-through-pull-requests",
    "href": "contributing/guidelines.html#but-we-use-github-flow-so-all-code-changes-happen-through-pull-requests",
    "title": "Contributing to tergite",
    "section": "",
    "text": "Pull requests are the best way to propose changes to the codebase (we use Github Flow). We actively welcome your pull requests:\n\nClone the repo and create your branch from main.\nIf you’ve added code that should be tested, add tests.\nIf you’ve changed APIs, update the documentation.\nEnsure the test suite passes.\nMake sure your code lints.\nIssue that pull request!",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#any-contributions-you-make-will-be-under-the-apache-2.0-software-licenses",
    "href": "contributing/guidelines.html#any-contributions-you-make-will-be-under-the-apache-2.0-software-licenses",
    "title": "Contributing to tergite",
    "section": "",
    "text": "In short, when you submit code changes, your submissions are understood to be under the same Apache 2.0 License that covers the project. Feel free to contact the maintainers if that’s a concern.",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#write-bug-reports-with-detail-background-and-sample-code",
    "href": "contributing/guidelines.html#write-bug-reports-with-detail-background-and-sample-code",
    "title": "Contributing to tergite",
    "section": "",
    "text": "This is an example. Here’s another example from Craig Hockenberry.\nGreat Bug Reports tend to have:\n\nA quick summary and/or background\nSteps to reproduce\n\nBe specific!\nGive sample code if you can.\n\nWhat you expected would happen\nWhat actually happens\nNotes (possibly including why you think this might be happening, or stuff you tried that didn’t work)\n\nPeople love thorough bug reports. I’m not even kidding.",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#license",
    "href": "contributing/guidelines.html#license",
    "title": "Contributing to tergite",
    "section": "",
    "text": "By contributing, you agree that your contributions will be licensed under its Apache 2.0 License.",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#contributor-licensing-agreement",
    "href": "contributing/guidelines.html#contributor-licensing-agreement",
    "title": "Contributing to tergite",
    "section": "",
    "text": "Before you can submit any code, all contributors must sign a contributor license agreement (CLA). By signing a CLA, you’re attesting that you are the author of the contribution, and that you’re freely contributing it under the terms of the Apache-2.0 license.\n“The individual CLA document is available for review as a PDF.\nPlease note that if your contribution is part of your employment or your contribution is the property of your employer, you will also most likely need to sign a corporate CLA.\nAll signed CLAs are emails to us at quantum.nextlabs@chalmers.se.”",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#references",
    "href": "contributing/guidelines.html#references",
    "title": "Contributing to tergite",
    "section": "",
    "text": "This document was adapted from a gist by Brian A. Danielak which was originally adapted from the open-source contribution guidelines for Facebook’s Draft",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "release_notes/tergite-sdk.html",
    "href": "release_notes/tergite-sdk.html",
    "title": "Tergite SDK",
    "section": "",
    "text": "Initial Public Release\n\n\n\nChanged README.rst to README.md\nChanged CONTRIBUTING.rst to CONTRIBUTING.md\nChanged CREDITS.rst to CREDITS.md\nUpdated the contribution guidelines and government model statements",
    "crumbs": [
      "Release Notes",
      "Tergite SDK"
    ]
  },
  {
    "objectID": "release_notes/tergite-sdk.html#section",
    "href": "release_notes/tergite-sdk.html#section",
    "title": "Tergite SDK",
    "section": "",
    "text": "Initial Public Release\n\n\n\nChanged README.rst to README.md\nChanged CONTRIBUTING.rst to CONTRIBUTING.md\nChanged CREDITS.rst to CREDITS.md\nUpdated the contribution guidelines and government model statements",
    "crumbs": [
      "Release Notes",
      "Tergite SDK"
    ]
  },
  {
    "objectID": "release_notes/tergite-autocalibration.html",
    "href": "release_notes/tergite-autocalibration.html",
    "title": "Tergite Autocalibration",
    "section": "",
    "text": "Initial Public Release\n\n\n\nAll research-related features regarding the calibration of a CZ gate\nUpdater to push calibration values as a backend to MSS/database\n\n\n\n\n\nImproved command line interface\nRenamed from tergite-acl to tergite-autocalibration\nUpdated the contribution guidelines and government model statements",
    "crumbs": [
      "Release Notes",
      "Tergite Autocalibration"
    ]
  },
  {
    "objectID": "release_notes/tergite-autocalibration.html#section",
    "href": "release_notes/tergite-autocalibration.html#section",
    "title": "Tergite Autocalibration",
    "section": "",
    "text": "Initial Public Release\n\n\n\nAll research-related features regarding the calibration of a CZ gate\nUpdater to push calibration values as a backend to MSS/database\n\n\n\n\n\nImproved command line interface\nRenamed from tergite-acl to tergite-autocalibration\nUpdated the contribution guidelines and government model statements",
    "crumbs": [
      "Release Notes",
      "Tergite Autocalibration"
    ]
  },
  {
    "objectID": "release_notes/tergite-backend.html",
    "href": "release_notes/tergite-backend.html",
    "title": "Tergite Backend",
    "section": "",
    "text": "Initial Public Release\n\n\n\nAdded storage_file lib (formerly tergite-quantify-connector-storagefile)\nAdded quantum_executor service (formerly tergite-quantify-connector)\nAdded the executor-config.yml and its python-based validators\n\n\n\n\n\nChanged the way discriminators are loaded to load from the database\nBREAKING_CHANGE: Removed hard-coded discriminators\nBREAKING_CHANGE: Removed official support for Python 3.8; Official support is now &gt;=3.9\nBREAKING_CHANGE: Removed Labber support\nReplaced tergite-quantify-connector-storagefile package with an internal storage_file lib\nMoved unused files to archive folder\nBREAKING_CHANGE: Removed calibration and two state discrimination source code\nBREAKING_CHANGE: Replaced tergite-quantify-connector-storagefile package with an internal storage_file lib\nBREAKING_CHANGE: Merged tergite-quantify-connector into tergite-backend and renamed its service to quantum_executor\nBREAKING_CHANGE: Changed configuration of hardware to use executor-config.yml file with proper validations on loading\nBREAKING_CHANGE: Removed support for Pulsar, or any other instrument drivers other than Cluster\nThe old implementation wrongfully assumed that all these drivers have the same signature i.e. driver(name: str, identifier: str | None)\nyet SpiRack(name: str, address: str, baud_rate: int = 9600, timeout: float = 1, is_dummy: bool = False,),\nPulsar(name: str, identifier: Optional[str] = None, port: Optional[int] = None, debug: Optional[int] = None, dummy_type: Optional[PulsarType] = None,)\nCluster(name: str, identifier: Optional[str] = None, port: Optional[int] = None, debug: Optional[int] = None, dummy_type: Optional[PulsarType] = None) are all different.\n\nBREAKING_CHANGE: We got rid of quantify connector’s redundant reset() method.\nBREAKING_CHANGE: Changed backend name used when querying MSS for backend properties to be equal to settings.DEFAULT_PREFIX\n\n\n\n\n\nFixed duplicate job uploads to respond with HTTP 409",
    "crumbs": [
      "Release Notes",
      "Tergite Backend"
    ]
  },
  {
    "objectID": "release_notes/tergite-backend.html#section",
    "href": "release_notes/tergite-backend.html#section",
    "title": "Tergite Backend",
    "section": "",
    "text": "Initial Public Release\n\n\n\nAdded storage_file lib (formerly tergite-quantify-connector-storagefile)\nAdded quantum_executor service (formerly tergite-quantify-connector)\nAdded the executor-config.yml and its python-based validators\n\n\n\n\n\nChanged the way discriminators are loaded to load from the database\nBREAKING_CHANGE: Removed hard-coded discriminators\nBREAKING_CHANGE: Removed official support for Python 3.8; Official support is now &gt;=3.9\nBREAKING_CHANGE: Removed Labber support\nReplaced tergite-quantify-connector-storagefile package with an internal storage_file lib\nMoved unused files to archive folder\nBREAKING_CHANGE: Removed calibration and two state discrimination source code\nBREAKING_CHANGE: Replaced tergite-quantify-connector-storagefile package with an internal storage_file lib\nBREAKING_CHANGE: Merged tergite-quantify-connector into tergite-backend and renamed its service to quantum_executor\nBREAKING_CHANGE: Changed configuration of hardware to use executor-config.yml file with proper validations on loading\nBREAKING_CHANGE: Removed support for Pulsar, or any other instrument drivers other than Cluster\nThe old implementation wrongfully assumed that all these drivers have the same signature i.e. driver(name: str, identifier: str | None)\nyet SpiRack(name: str, address: str, baud_rate: int = 9600, timeout: float = 1, is_dummy: bool = False,),\nPulsar(name: str, identifier: Optional[str] = None, port: Optional[int] = None, debug: Optional[int] = None, dummy_type: Optional[PulsarType] = None,)\nCluster(name: str, identifier: Optional[str] = None, port: Optional[int] = None, debug: Optional[int] = None, dummy_type: Optional[PulsarType] = None) are all different.\n\nBREAKING_CHANGE: We got rid of quantify connector’s redundant reset() method.\nBREAKING_CHANGE: Changed backend name used when querying MSS for backend properties to be equal to settings.DEFAULT_PREFIX\n\n\n\n\n\nFixed duplicate job uploads to respond with HTTP 409",
    "crumbs": [
      "Release Notes",
      "Tergite Backend"
    ]
  },
  {
    "objectID": "release_notes/tergite-frontend.html",
    "href": "release_notes/tergite-frontend.html",
    "title": "Tergite Frontend",
    "section": "",
    "text": "Initial Public Release\n\n\n\nUpdated the contribution guidelines and government model statements",
    "crumbs": [
      "Release Notes",
      "Tergite Frontend"
    ]
  },
  {
    "objectID": "release_notes/tergite-frontend.html#section",
    "href": "release_notes/tergite-frontend.html#section",
    "title": "Tergite Frontend",
    "section": "",
    "text": "Initial Public Release\n\n\n\nUpdated the contribution guidelines and government model statements",
    "crumbs": [
      "Release Notes",
      "Tergite Frontend"
    ]
  },
  {
    "objectID": "why.html",
    "href": "why.html",
    "title": "Why tergite?",
    "section": "",
    "text": "TODO\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tergite",
    "section": "",
    "text": "Why tergite?\n  \n  \n    \n     Quick Start\n  \n  \n    \n     GitHub"
  },
  {
    "objectID": "index.html#structure",
    "href": "index.html#structure",
    "title": "Tergite",
    "section": "Structure",
    "text": "Structure\n\n\nComponents\nThe tergite stack is composed of three components\n\ntergite-backend\n\nThe operating system of the quantum computer. It communicates with the world via a RESTful API.\n\ntergite-frontend\n\nThe server that gives remote access to any tergite-backend instance. It communicates with the world via a RESTful API.\n\ntergite SDK (or just tergite)\n\nThe Python software development kit (SDK) quantum computer researchers can use in their scripts to interact with the tergite stack.\n\n\n\n\nAccessories\nThe tergite stack has a number of accessory softwares that are currently not initmately woven into the stack but mught be in future\n\ntergite-autocalibration\n\nThe Python commandline application (CLI) that is used to automatically tune the quantum computer.\n\n\n\n\nLanguage of Communication\nWe use OpenPulse to communicate pass quantum computer instructions from the SDK to the backend part of the tergite stack."
  },
  {
    "objectID": "index.html#developmment",
    "href": "index.html#developmment",
    "title": "Tergite",
    "section": "Developmment",
    "text": "Developmment\nThis project is developed by a core group of collaborators. Chalmers Next Labs AB (CNL) takes on the role of managing and maintaining this project.\n\nContributors\nWe are grateful for the wonderful contributions from:\n\nChalmers Next Labs AB - Quantum Division\nChalmers University of Technology - Microtechnology and Nanoscience department\n\n\n\n\n\n\n\n \n\n\n \n\n\n\n\n\nSponsors\n\nKnut and Alice Wallenburg Foundation under the Wallenberg Center for Quantum Technology (WAQCT) project at Chalmers University of Technology\nNordic e-Infrastructure Collaboration (NeIC) and NordForsk under the NordIQuEst project\nEuropean Union’s Horizon Europe under the OpenSuperQ project\nEuropean Union’s Horizon Europe under the OpenSuperQPlus project"
  },
  {
    "objectID": "examples/02_bell_state.html",
    "href": "examples/02_bell_state.html",
    "title": "Bell State",
    "section": "",
    "text": "This is a showcase of connecting to tergite via the tergite SDK, running a basic two-qubit circuit to generate the bell state \\(|\\Psi\\rangle = |00\\rangle + |11\\rangle\\), and retrieving the measurement results.",
    "crumbs": [
      "Examples",
      "Bell State"
    ]
  },
  {
    "objectID": "examples/02_bell_state.html#install-dependencies",
    "href": "examples/02_bell_state.html#install-dependencies",
    "title": "Bell State",
    "section": "Install dependencies",
    "text": "Install dependencies\nThis example depends on:\n\nqiskit\ntergite\n\nInstall these dependencies\n\n%pip install qiskit\n%pip install tergite",
    "crumbs": [
      "Examples",
      "Bell State"
    ]
  },
  {
    "objectID": "examples/02_bell_state.html#import-the-basic-dependencies",
    "href": "examples/02_bell_state.html#import-the-basic-dependencies",
    "title": "Bell State",
    "section": "Import the basic dependencies",
    "text": "Import the basic dependencies\n\nimport time\nimport qiskit.circuit as circuit\nimport qiskit.compiler as compiler\nfrom tergite.qiskit.providers import Tergite\nfrom tergite.qiskit.providers.provider_account import ProviderAccount",
    "crumbs": [
      "Examples",
      "Bell State"
    ]
  },
  {
    "objectID": "examples/02_bell_state.html#configure-session",
    "href": "examples/02_bell_state.html#configure-session",
    "title": "Bell State",
    "section": "Configure Session",
    "text": "Configure Session\nBefore we get any further, we will take the time to define some of the parameters we will use for our tergite job.\n\n# the Tergite API URL e.g. \"https://api.tergite.example\"\nAPI_URL = \"https://api.qal9000.se\"\n# API token for connecting to tergite\nAPI_TOKEN = \"API-TOKEN\"\n# The name of the Quantum Computer to use from the available quantum computers\nBACKEND_NAME = \"SimulatorC\"\n# the name of this service. For your own bookkeeping.\nSERVICE_NAME = \"local\"\n# the timeout in seconds for how long to keep checking for results\nPOLL_TIMEOUT = 300",
    "crumbs": [
      "Examples",
      "Bell State"
    ]
  },
  {
    "objectID": "examples/02_bell_state.html#get-the-tergite-backend",
    "href": "examples/02_bell_state.html#get-the-tergite-backend",
    "title": "Bell State",
    "section": "Get the Tergite Backend",
    "text": "Get the Tergite Backend\nThe backend object can now be obtained. A detailed list of the backend properties — such as the available gate set, coupling map and number of qubits — is availablde by printing the backend object.\n\n# provider account creation can be skipped in case you already saved\n# your provider account to the `~/.qiskit/tergiterc` file.\n# See below how that is done.\naccount = ProviderAccount(service_name=SERVICE_NAME, url=API_URL, token=API_TOKEN)\n\nprovider = Tergite.use_provider_account(account)\n# to save this account to the `~/.qiskit/tergiterc` file, add the `save=True`\n# provider = Tergite.use_provider_account(account, save=True)\n\n# Get the tergite backend in case you skipped provider account creation\n# provider = Tergite.get_provider(service_name=SERVICE_NAME)\nbackend = provider.get_backend(BACKEND_NAME)\nbackend.set_options(shots=1024)\nprint(backend)",
    "crumbs": [
      "Examples",
      "Bell State"
    ]
  },
  {
    "objectID": "examples/02_bell_state.html#create-the-qiskit-circuit",
    "href": "examples/02_bell_state.html#create-the-qiskit-circuit",
    "title": "Bell State",
    "section": "Create the Qiskit Circuit",
    "text": "Create the Qiskit Circuit\nTo test our connection, we will implement a short test circuit. The circuit we will run produces the Bell state \\(|\\Psi\\rangle = |00\\rangle + |11\\rangle.\\)\n\nqc = circuit.QuantumCircuit(2)\nqc.h(0)\nqc.cx(0,1)\n\nWe can visualize and verify our circuit with Qiskit’s built in draw() method. The output format of qc.draw() can be changed, see https://docs.quantum.ibm.com/build/circuit-visualization. Note the two added measurements and corresponding classical bit registers meas_0 and meas_1.\n\nqc.draw()\n\nTo measure the prepared Bell state we add explicit measurements to all qubits using qc.measure_all(). This will perform a meaurement in the so-called computational basis, \\(\\langle q_n|Z|q_n\\rangle\\), mapping the eigenvalues \\(\\{-1,1\\}\\) to the classical binary values \\(\\{0,1\\}\\). Drawing the final circuit shows the additional measurement operations and the classical bit register meas_0 and meas_1.\n\nqc.measure_all()\nqc.draw()",
    "crumbs": [
      "Examples",
      "Bell State"
    ]
  },
  {
    "objectID": "examples/02_bell_state.html#compile-circuit",
    "href": "examples/02_bell_state.html#compile-circuit",
    "title": "Bell State",
    "section": "Compile Circuit",
    "text": "Compile Circuit\nIn order to execute the circuit on physical hardware, the circuit needs to be compiled (or transpiled) to the target architecture. At the least, transpilation accounts for the QPU’s native gate set and the qubit connectivity on the QPU. Many transpilers also offer some level of optimization, reducing the circuit size.\n\ntc = compiler.transpile(qc, backend=backend)\ntc.draw()",
    "crumbs": [
      "Examples",
      "Bell State"
    ]
  },
  {
    "objectID": "examples/02_bell_state.html#run-the-circuit",
    "href": "examples/02_bell_state.html#run-the-circuit",
    "title": "Bell State",
    "section": "Run the Circuit",
    "text": "Run the Circuit\nOnce the cicruit has been compiled to the native gate set and connectivity, we use it to submit a job to the backend.\n\njob = backend.run(tc, meas_level=2, meas_return=\"single\")",
    "crumbs": [
      "Examples",
      "Bell State"
    ]
  },
  {
    "objectID": "examples/02_bell_state.html#see-the-results",
    "href": "examples/02_bell_state.html#see-the-results",
    "title": "Bell State",
    "section": "See the Results",
    "text": "See the Results\nWhen the job has been submitted, we will need to wait potential queue time and time required to execute the job.\n\nelapsed_time = 0\nresult = None\nwhile result is None:\n    if elapsed_time &gt; POLL_TIMEOUT:\n        raise TimeoutError(f\"result polling timeout {POLL_TIMEOUT} seconds exceeded\")\n\n    time.sleep(1)\n    elapsed_time += 1\n    result = job.result()\n\nresult.get_counts()",
    "crumbs": [
      "Examples",
      "Bell State"
    ]
  },
  {
    "objectID": "examples/02_bell_state.html#acknowledgement",
    "href": "examples/02_bell_state.html#acknowledgement",
    "title": "Bell State",
    "section": "Acknowledgement",
    "text": "Acknowledgement\nThis notebook was prepared by:\n\nMårten Skogh\nMartin Ahindura",
    "crumbs": [
      "Examples",
      "Bell State"
    ]
  },
  {
    "objectID": "tutorials/01_quick_start.html",
    "href": "tutorials/01_quick_start.html",
    "title": "Quick Start",
    "section": "",
    "text": "Let’s attempt to setup the tergite stack to run on a dummy cluster on your local machine.\nWe will not need an actual quantum computer. Take note, however, that the dummy cluster only returns 0 in its results.",
    "crumbs": [
      "Tutorials",
      "Quick Start"
    ]
  },
  {
    "objectID": "tutorials/01_quick_start.html#prerequisites",
    "href": "tutorials/01_quick_start.html#prerequisites",
    "title": "Quick Start",
    "section": "Prerequisites",
    "text": "Prerequisites\nYou may have to install these software if you don’t have them already installed.\n\nDocker +v23.0.5\nConda\nRedis\nMongoDb\nVisual Studio Code\nMongo compass",
    "crumbs": [
      "Tutorials",
      "Quick Start"
    ]
  },
  {
    "objectID": "tutorials/01_quick_start.html#setup-the-backend",
    "href": "tutorials/01_quick_start.html#setup-the-backend",
    "title": "Quick Start",
    "section": "Setup the Backend",
    "text": "Setup the Backend\n\nEnsure you have conda installed. (You could simply have python +3.9 installed instead.)\nEnsure you have the Redis server running.\nOpen terminal.\nClone the tergite-backend repo\n\ngit clone https://github.com/tergite/tergite-backend.git\n\nCreate conda environment\n\nconda create -n bcc -y python=3.9\nconda activate bcc\n\nInstall dependencies\n\ncd tergite-backend\npip install -r requirements.txt\n\nCreate an .env file with visual studio code (or any other text editor).\n\ncode .env\n\nUpdate .env file to have the following content\n\n# .env\nAPP_SETTINGS=development\nIS_AUTH_ENABLED=False\n\nDEFAULT_PREFIX=loke\nSTORAGE_ROOT=/tmp\nLOGFILE_DOWNLOAD_POOL_DIRNAME=logfile_download_pool\nLOGFILE_UPLOAD_POOL_DIRNAME=logfile_upload_pool\nJOB_UPLOAD_POOL_DIRNAME=job_upload_pool\nJOB_PRE_PROC_POOL_DIRNAME=job_preproc_pool\nJOB_EXECUTION_POOL_DIRNAME=job_execution_pool\n\n# Main Service Server\nMSS_MACHINE_ROOT_URL=http://localhost:8002\nMSS_PORT=8002\n\n# Backend Control computer\nBCC_MACHINE_ROOT_URL=http://localhost:8000\nBCC_PORT=8000\n\nEXECUTOR_CONFIG_FILE=executor-config.yml\n\nCreate an executor-config.yml file with visual studio code (or any other text editor).\n\ncode executor-config.yml\n\nUpdate the executor-config.yml with the following content\n\n# executor-config.yml\ngeneral:\n  data_directory: data\n\nclusters:\n  - name: clusterA\n    instrument_type: Cluster\n    is_dummy: true\n    ref: internal\n    instrument_address: \"192.0.2.141\"\n\n    modules:\n      - name: \"clusterA_module7\"\n        instrument_type: \"QCM_RF\"\n\n        complex_outputs:\n          - name: \"complex_output_0\"\n            lo_freq: 4458000000\n            dc_mixer_offset_I: 0\n            dc_mixer_offset_Q: 0\n            portclock_configs:\n            - port: \"drive0\"\n              clock: \"d0\"\n              mixer_amp_ratio: 1\n              mixer_phase_error_deg: 0\n\n      - name: \"clusterA_module8\"\n        instrument_type: \"QCM_RF\"\n\n        complex_outputs:\n          - name: \"complex_output_0\"\n            lo_freq: 5110000000\n            dc_mixer_offset_I: 0\n            dc_mixer_offset_Q: 0\n            portclock_configs:\n            - port: \"drive1\"\n              clock: \"d1\"\n              mixer_amp_ratio: 1\n              mixer_phase_error_deg: 0\n\n      - name: \"clusterA_module9\"\n        instrument_type: \"QCM_RF\"\n\n        complex_outputs:\n          - name: \"complex_output_0\"\n            lo_freq: 4445000000\n            dc_mixer_offset_I: 0\n            dc_mixer_offset_Q: 0\n            portclock_configs:\n            - port: \"drive2\"\n              clock: \"d2\"\n              mixer_amp_ratio: 1\n              mixer_phase_error_deg: 0\n\n\n      - name: \"clusterA_module17\"\n        instrument_type: \"QRM_RF\"\n\n        complex_outputs:\n          - name: \"complex_output_0\"\n            lo_freq: 6838000000\n            dc_mixer_offset_I: 0\n            dc_mixer_offset_Q: 0\n            portclock_configs:\n            - port: \"readout0\"\n              clock: \"m0\"\n              mixer_amp_ratio: 1\n              mixer_phase_error_deg: 0\n            - port: \"readout1\"\n              clock: \"m1\"\n              mixer_amp_ratio: 1\n              mixer_phase_error_deg: 0\n            - port: \"readout2\"\n              clock: \"m2\"\n              mixer_amp_ratio: 1\n              mixer_phase_error_deg: 0\n\nRun start script\n\n./start_bcc.sh --device configs/device_default.toml\n\nOpen your browser at http://localhost:8000/docs to see the interactive API docs",
    "crumbs": [
      "Tutorials",
      "Quick Start"
    ]
  },
  {
    "objectID": "tutorials/01_quick_start.html#setup-the-frontend",
    "href": "tutorials/01_quick_start.html#setup-the-frontend",
    "title": "Quick Start",
    "section": "Setup the Frontend",
    "text": "Setup the Frontend\n\nEnsure you have docker is running.\nOpen another terminal\nClone the tergite-backend repo\n\ngit clone https://github.com/tergite/tergite-frontend.git\n\nCreate an mss-config.toml file with visual studio code (or any other text editor).\n\ncode mss-config.toml\n\nUpdate the mss-config.toml with the following content\n\n# mss-config.toml\n\n# general configurations\n[general]\n# the port on which MSS is running\nmss_port = 8002\n# the port on which the websocket is running\nws_port = 6532\n# environment reflect which environment the app is to run in.\nenvironment = \"development\"\n# the host the uvicorn runs on.\n# During testing auth on 127.0.0.1, set this to \"127.0.0.1\". default: \"0.0.0.0\"\nmss_host = \"127.0.0.1\"\n\n[database]\n# configurations for the database\nname = \"testing\"\n# database URI\n# host.docker.internal resolves to the host's 127.0.0.1\n# see https://stackoverflow.com/questions/31324981/how-to-access-host-port-from-docker-container#answer-43541732\nurl = \"mongodb://host.docker.internal:27017\"\n\n[[backends]]\nname = \"loke\"\n# the URL where this backend is running\n# host.docker.internal resolves to the host's 127.0.0.1\n# see https://stackoverflow.com/questions/31324981/how-to-access-host-port-from-docker-container#answer-43541732\nurl = \"http://host.docker.internal:8000\"\n\n[auth]\n# turn auth OFF or ON, default=true\nis_enabled = false\n\n# Puhuri synchronization\n# Puhuri is a resource management platform for HPC systems, that is also to be used for Quantum Computer's\n[puhuri]\n# turn puhuri synchronization OFF or ON, default=true\nis_enabled = false\n\nCreate a .env file with visual studio code (or any other text editor).\n\ncode .env\n\nUpdate the .env with the following content\n\n# .env\n\n# required\nENVIRONMENT=\"development\"\nWEBGUI_ENDPOINT=\"http://127.0.0.1:3000\"\nLANDING_ENDPOINT=\"http://127.0.0.1:8030\"\nMSS_ENDPOINT=\"http://127.0.0.1:8002\"\nGRAFANA_LOKI_URL=http://127.0.0.1:3100/loki/api/v1/push\nLOKI_LOGGER_ID=some-generic-id\n\n# docker LOGGING_DRIVER can be journald, json-file, local etc. \nLOGGING_DRIVER=json-file\n# image versions:\n# Note: If you ever want the images to be rebuilt, \n# you have to change the app version numbers here \n# before running \"docker compose up\"\nMSS_VERSION=v0.0.1\nWEBGUI_VERSION=v0.0.1\nLANDING_PAGE_VERSION=v0.0.1\nPROMTAIL_VERSION=2.8.3\n\nOpen the Mongo compass application and connect to the default local mongo database\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a new mongo database called “testing” that contains a “backends” collection.\n\n\n\n\n\n\n\n\n\n\n\n\nClick on “ADD DATA” then “Insert document” in your “backends” collection in your mongo compass\n\n\n\n\n\n\n\n\n\n\n\n\nCopy and paste the following document into the window that opens, replacing everything that was already there.\n\n{\n  \"_id\": {\n    \"$oid\": \"664756593b639968c2d3df24\"\n  },\n  \"name\": \"loke\",\n  \"characterized\": true,\n  \"open_pulse\": true,\n  \"timelog\": {\n    \"REGISTERED\": \"2023-11-15T16:36:17.474815\",\n    \"LAST_UPDATED\": \"2023-11-15T15:41:51.528Z\"\n  },\n  \"version\": \"2024.04.0\",\n  \"num_qubits\": 5,\n  \"num_couplers\": 8,\n  \"num_resonators\": 5,\n  \"dt\": 1e-9,\n  \"dtm\": 1e-9,\n  \"meas_map\": [\n    [\n      0,\n      1,\n      2,\n      3,\n      4\n    ]\n  ],\n  \"coupling_map\": [\n    [\n      0,\n      2\n    ],\n    [\n      2,\n      0\n    ],\n    [\n      1,\n      2\n    ],\n    [\n      2,\n      1\n    ],\n    [\n      2,\n      3\n    ],\n    [\n      3,\n      2\n    ],\n    [\n      2,\n      4\n    ],\n    [\n      4,\n      2\n    ]\n  ],\n  \"device_properties\": {\n    \"qubit\": [\n      {\n        \"frequency\": 4511480043.556283,\n        \"pi_pulse_amplitude\": 0.17555712637424228,\n        \"pi_pulse_duration\": 5.6e-8,\n        \"pulse_sigma\": 7e-9,\n        \"pulse_type\": \"Gaussian\",\n        \"t1_decoherence\": 0.000034,\n        \"t2_decoherence\": 0.000033,\n        \"id\": 0\n      },\n      {\n        \"frequency\": 4677112343.360253,\n        \"pi_pulse_amplitude\": 0.17535338530538067,\n        \"pi_pulse_duration\": 5.6e-8,\n        \"pulse_sigma\": 7e-9,\n        \"pulse_type\": \"Gaussian\",\n        \"t1_decoherence\": 0.000034,\n        \"t2_decoherence\": 0.000033,\n        \"id\": 1\n      },\n      {\n        \"frequency\": 5770226599.80365,\n        \"pi_pulse_amplitude\": 0.17873594718151276,\n        \"pi_pulse_duration\": 5.6e-8,\n        \"pulse_sigma\": 7e-9,\n        \"pulse_type\": \"Gaussian\",\n        \"t1_decoherence\": 0.000034,\n        \"t2_decoherence\": 0.000033,\n        \"id\": 2\n      },\n      {\n        \"frequency\": 6856217811.995201,\n        \"pi_pulse_amplitude\": 0.17326197853513559,\n        \"pi_pulse_duration\": 5.6e-8,\n        \"pulse_sigma\": 7e-9,\n        \"pulse_type\": \"Gaussian\",\n        \"t1_decoherence\": 0.000034,\n        \"t2_decoherence\": 0.000033,\n        \"id\": 3\n      },\n      {\n        \"frequency\": 6701096836.557067,\n        \"pi_pulse_amplitude\": 0.16948867103728774,\n        \"pi_pulse_duration\": 5.6e-8,\n        \"pulse_sigma\": 7e-9,\n        \"pulse_type\": \"Gaussian\",\n        \"t1_decoherence\": 0.000034,\n        \"t2_decoherence\": 0.000033,\n        \"id\": 4\n      }\n    ],\n    \"readout_resonator\": [\n      {\n        \"acq_delay\": 5e-8,\n        \"acq_integration_time\": 0.000001,\n        \"frequency\": {\n          \"$numberLong\": \"7260080000\"\n        },\n        \"pulse_delay\": 0,\n        \"pulse_duration\": 9e-7,\n        \"pulse_type\": \"Square\",\n        \"pulse_amplitude\": 0.1266499392606423,\n        \"lda_parameters\": {\n          \"twoState\": {\n            \"score\": 0.985,\n            \"coef\": [\n              [\n                -98953.87504155144,\n                -114154.48696231026\n              ]\n            ],\n            \"intercept\": [\n              -38.4344477840827\n            ]\n          },\n          \"threeState\": {\n            \"score\": 0.9580015923566879,\n            \"coef\": [\n              [\n                67556.81859745766,\n                71505.66931668088\n              ],\n              [\n                -14142.401380443791,\n                -68814.26719610114\n              ],\n              [\n                -104325.0336269802,\n                -5256.644766757276\n              ]\n            ],\n            \"intercept\": [\n              18.888335231525723,\n              -21.898486762901555,\n              -33.556356307556854\n            ]\n          }\n        },\n        \"id\": 0\n      },\n      {\n        \"acq_delay\": 5e-8,\n        \"acq_integration_time\": 0.000001,\n        \"frequency\": {\n          \"$numberLong\": \"7380000000\"\n        },\n        \"pulse_delay\": 0,\n        \"pulse_duration\": 9e-7,\n        \"pulse_type\": \"Square\",\n        \"pulse_amplitude\": 0.12660078572926436,\n        \"lda_parameters\": {\n          \"twoState\": {\n            \"score\": 0.987,\n            \"coef\": [\n              [\n                -107941.00358803963,\n                -124239.32054386326\n              ]\n            ],\n            \"intercept\": [\n              -42.05181160328822\n            ]\n          },\n          \"threeState\": {\n            \"score\": 0.9589968152866242,\n            \"coef\": [\n              [\n                74144.78052369223,\n                80219.75345675235\n              ],\n              [\n                -20263.355831418605,\n                -73050.73707640498\n              ],\n              [\n                -105237.1576020969,\n                -14001.985117865986\n              ]\n            ],\n            \"intercept\": [\n              21.107115767442064,\n              -24.401897244641916,\n              -36.12273520392597\n            ]\n          }\n        },\n        \"id\": 1\n      },\n      {\n        \"acq_delay\": 5e-8,\n        \"acq_integration_time\": 0.000001,\n        \"frequency\": {\n          \"$numberLong\": \"7502000000\"\n        },\n        \"pulse_delay\": 0,\n        \"pulse_duration\": 9e-7,\n        \"pulse_type\": \"Square\",\n        \"pulse_amplitude\": 0.08245560237524203,\n        \"lda_parameters\": {\n          \"twoState\": {\n            \"score\": 0.9905,\n            \"coef\": [\n              [\n                -191087.42493249022,\n                -20803.06874845618\n              ]\n            ],\n            \"intercept\": [\n              -22.684588212281916\n            ]\n          },\n          \"threeState\": {\n            \"score\": 0.9301353503184714,\n            \"coef\": [\n              [\n                117698.79312336461,\n                1323.6059974854222\n              ],\n              [\n                -73571.40229985592,\n                -28205.57304588287\n              ],\n              [\n                -86186.31020216543,\n                52503.84189140131\n              ]\n            ],\n            \"intercept\": [\n              8.616211460736217,\n              -14.506319082756788,\n              -15.607187419129968\n            ]\n          }\n        },\n        \"id\": 2\n      },\n      {\n        \"acq_delay\": 5e-8,\n        \"acq_integration_time\": 0.000001,\n        \"frequency\": {\n          \"$numberLong\": \"7712000000\"\n        },\n        \"pulse_delay\": 0,\n        \"pulse_duration\": 9e-7,\n        \"pulse_type\": \"Square\",\n        \"pulse_amplitude\": 0.04188729430238,\n        \"lda_parameters\": {\n          \"twoState\": {\n            \"score\": 0.8735,\n            \"coef\": [\n              [\n                -29474.17108465108,\n                78360.1067777809\n              ]\n            ],\n            \"intercept\": [\n              -1.933795064413808\n            ]\n          },\n          \"threeState\": {\n            \"score\": 0.7563694267515924,\n            \"coef\": [\n              [\n                9107.496591845296,\n                -51304.48625833322\n              ],\n              [\n                -21037.874286196384,\n                28857.813926275605\n              ],\n              [\n                23301.518934279466,\n                43841.15689855003\n              ]\n            ],\n            \"intercept\": [\n              -0.42091088440579094,\n              -2.3990628805824983,\n              -3.202495936672423\n            ]\n          }\n        },\n        \"id\": 3\n      },\n      {\n        \"acq_delay\": 5e-8,\n        \"acq_integration_time\": 0.000001,\n        \"frequency\": {\n          \"$numberLong\": \"7871000000\"\n        },\n        \"pulse_delay\": 0,\n        \"pulse_duration\": 9e-7,\n        \"pulse_type\": \"Square\",\n        \"pulse_amplitude\": 0.05844291534543274,\n        \"lda_parameters\": {\n          \"twoState\": {\n            \"score\": 0.96375,\n            \"coef\": [\n              [\n                -106998.96952984166,\n                66774.10489889105\n              ]\n            ],\n            \"intercept\": [\n              -6.6282190356967075\n            ]\n          },\n          \"threeState\": {\n            \"score\": 0.8578821656050956,\n            \"coef\": [\n              [\n                60709.720254705426,\n                -51675.5747833689\n              ],\n              [\n                -49881.622682824636,\n                16479.42339459183\n              ],\n              [\n                -21148.62807007965,\n                68742.48318120521\n              ]\n            ],\n            \"intercept\": [\n              1.4575641967873554,\n              -5.385810943207904,\n              -6.329888946815834\n            ]\n          }\n        },\n        \"id\": 4\n      }\n    ],\n    \"coupler\": [\n      {}\n    ]\n  },\n  \"discriminators\": {\n    \"lda\": {\n      \"q0\": {\n        \"score\": 0.985,\n        \"intercept\": -38.4344477840827,\n        \"coef_0\": -98953.87504155144,\n        \"coef_1\": -114154.48696231026\n      },\n      \"q1\": {\n        \"score\": 0.987,\n        \"intercept\": -42.05181160328822,\n        \"coef_0\": -107941.00358803963,\n        \"coef_1\": -124239.32054386326\n      },\n      \"q2\": {\n        \"score\": 0.9905,\n        \"intercept\": -22.684588212281916,\n        \"coef_0\": -191087.42493249022,\n        \"coef_1\": -20803.06874845618\n      },\n      \"q3\": {\n        \"score\": 0.8735,\n        \"intercept\": -1.933795064413808,\n        \"coef_0\": -29474.17108465108,\n        \"coef_1\": 78360.1067777809\n      },\n      \"q4\": {\n        \"score\": 0.96375,\n        \"intercept\": -6.6282190356967075,\n        \"coef_0\": -106998.96952984166,\n        \"coef_1\": 66774.10489889105\n      }\n    }\n  },\n  \"qubit_ids\": [\n    \"q0\",\n    \"q1\",\n    \"q2\",\n    \"q3\",\n    \"q4\"\n  ],\n  \"description\": \"Backend for the simulator supporting qiskit-connector parsing for the release 2024.3\"\n}\n\nClick “Insert” to insert the document into the “backends” collection.\n\n\n\n\n\n\n\n\n\n\n\n\nTo Run the services, use the fresh-docker-compose.yml.\n\ndocker compose -f fresh-docker-compose.yml up -d\n\nOpen your browser at\n\nhttp://localhost:8030 to see the landing page\nhttp://localhost:8002 to see the MSS service\nhttp://localhost:3000 to see the webGUI application\n\nTo stop the services, run:\n\ndocker compose -f fresh-docker-compose.yml stop\n\nTo remove stop the services and remove their containers also, run:\n\ndocker compose -f fresh-docker-compose.yml down\n\nTo view logs of the docker containers to catch some errors, use:\n\ndocker compose -f fresh-docker-compose.yml logs -f\nsee more at https://docs.docker.com/reference/cli/docker/compose/logs/",
    "crumbs": [
      "Tutorials",
      "Quick Start"
    ]
  },
  {
    "objectID": "tutorials/01_quick_start.html#run-an-experiment",
    "href": "tutorials/01_quick_start.html#run-an-experiment",
    "title": "Quick Start",
    "section": "Run an Experiment",
    "text": "Run an Experiment\n\nOpen another terminal\nCreate a new folder “tergite-test” and enter it\n\nmkdir tergite-test\ncd tergite-test\n\nCreate conda environment and activate it\n\nconda create -n terg -y python=3.9\nconda activate terg\n\nInstall qiskit and tergite SDK by running the command below:\n\npip install qiskit\npip install tergite\n\nCreate a file main.py with visual studio code (or any other text editor).\n\ncode main.py\n\nUpdate the main.py file with the following content:\n\n# main.py\n\"\"\"A sample script doing a very simple quantum operation\"\"\"\nimport time\n\nimport qiskit.circuit as circuit\nimport qiskit.compiler as compiler\n\nfrom tergite.qiskit.providers import Job, Tergite\nfrom tergite.qiskit.providers.provider_account import ProviderAccount\n\nif __name__ == \"__main__\":\n    # the Tergite API URL\n    API_URL = \"http://localhost:8002\"\n    # The name of the Quantum Computer to use from the available quantum computers\n    BACKEND_NAME = \"loke\"\n    # the name of this service. For your own bookkeeping.\n    SERVICE_NAME = \"local\"\n    # the timeout in seconds for how long to keep checking for results\n    POLL_TIMEOUT = 100\n\n    # create the Qiskit circuit\n    qc = circuit.QuantumCircuit(1)\n    qc.x(0)\n    qc.h(0)\n    qc.measure_all()\n\n    # create a provider\n    # provider account creation can be skipped in case you already saved\n    # your provider account to the `~/.qiskit/tergiterc` file.\n    # See below how that is done.\n    account = ProviderAccount(service_name=SERVICE_NAME, url=API_URL)\n    provider = Tergite.use_provider_account(account)\n    # to save this account to the `~/.qiskit/tergiterc` file, add the `save=True`\n    # provider = Tergite.use_provider_account(account, save=True)\n\n    # Get the tergite backend in case you skipped provider account creation\n    # provider = Tergite.get_provider(service_name=SERVICE_NAME)\n    backend = provider.get_backend(BACKEND_NAME)\n    backend.set_options(shots=1024)\n\n    # compile the circuit\n    tc = compiler.transpile(qc, backend=backend)\n\n    # run the circuit\n    job: Job = backend.run(tc, meas_level=2, meas_return=\"single\")\n\n    # view the results\n    elapsed_time = 0\n    result = None\n    while result is None:\n        if elapsed_time &gt; POLL_TIMEOUT:\n            raise TimeoutError(\n                f\"result polling timeout {POLL_TIMEOUT} seconds exceeded\"\n            )\n\n        time.sleep(1)\n        elapsed_time += 1\n        result = job.result()\n\n    print(result.get_counts())\n\nRun the above script with\n\npython main.py\n\nIt should return something like:\n\n{0: 1024}\nNote: We get only 0’s because we are using the dummy cluster from quantify scheduler",
    "crumbs": [
      "Tutorials",
      "Quick Start"
    ]
  },
  {
    "objectID": "tutorials/02_authentication.html",
    "href": "tutorials/02_authentication.html",
    "title": "Authentication",
    "section": "",
    "text": "TODO\n\n\n\n Back to top",
    "crumbs": [
      "Tutorials",
      "Authentication"
    ]
  }
]