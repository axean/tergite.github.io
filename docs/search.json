[
  {
    "objectID": "tutorials/authentication.html",
    "href": "tutorials/authentication.html",
    "title": "Authentication",
    "section": "",
    "text": "TODO\n\n\n\n Back to top",
    "crumbs": [
      "Authentication"
    ]
  },
  {
    "objectID": "release_notes.html",
    "href": "release_notes.html",
    "title": "Release notes",
    "section": "",
    "text": "TODO\n\n\n\n Back to top"
  },
  {
    "objectID": "quick_start.html",
    "href": "quick_start.html",
    "title": "Quick Start",
    "section": "",
    "text": "Let’s attempt to setup the tergite stack to run on a dummy cluster on your local machine.\nWe will not need an actual quantum computer. Take note, however, that the dummy cluster only returns 0 in its results.",
    "crumbs": [
      "Quick Start"
    ]
  },
  {
    "objectID": "quick_start.html#prerequisites",
    "href": "quick_start.html#prerequisites",
    "title": "Quick Start",
    "section": "Prerequisites",
    "text": "Prerequisites\nYou may have to install these software if you don’t have them already installed.\n\nDocker +v23.0.5\nConda\nRedis\nMongoDb",
    "crumbs": [
      "Quick Start"
    ]
  },
  {
    "objectID": "quick_start.html#setup-the-backend",
    "href": "quick_start.html#setup-the-backend",
    "title": "Quick Start",
    "section": "Setup the Backend",
    "text": "Setup the Backend\n\nEnsure you have conda installed. (You could simply have python +3.9 installed instead.)\nEnsure you have the Redis server running.\nClone the repo\n\ngit clone git@github.com:tergite/tergite-backend.git\n\nCreate conda environment\n\nconda create -n bcc -y python=3.9\nconda activate bcc\n\nInstall dependencies\n\ncd tergite-backend\npip install -r requirements.txt\n\nCopy the dot-env-template.txt file to .env and update the environment variables there appropriately.\n\ncp dot-env-template.txt .env\nMake sure that the DEFAULT_PREFIX=loke as this gives the running backend the name of “loke” which will be used later.\n\nCopy the dummy hardware config file dummy-executor-config.yml into the executor-config.yml file.\n\ncp app/tests/fixtures/dummy-executor-config.yml executor-config.yml\nNote: For a more custom hardware configuration, you might have to copy the example hardware config file executor-config.example.yml into the executor-config.yml file and update the variables there in.\ncp executor-config.example.yml executor-config.yml\n\nRun start script\n\n./start_bcc.sh --device configs/device_default.toml\n\nOpen your browser at http://localhost:8000/docs to see the interactive API docs",
    "crumbs": [
      "Quick Start"
    ]
  },
  {
    "objectID": "quick_start.html#setup-the-frontend",
    "href": "quick_start.html#setup-the-frontend",
    "title": "Quick Start",
    "section": "Setup the Frontend",
    "text": "Setup the Frontend\n\nEnsure you have docker installed.\nClone the repo\n\ngit clone git@github.com:tergite/tergite-frontend.git\n\nCopy the mss-config.example.toml to mss-config.toml and update the configuration there.\n\ncd tergite-frontend\ncp mss-config.example.toml mss-config.toml\n\nEnsure only the following [[backends]] exists in mss-config.toml with:\n\n[[backends]]\nname = \"loke\"\n# host.docker.internal resolves to the host's 127.0.0.1\n# see https://stackoverflow.com/questions/31324981/how-to-access-host-port-from-docker-container#answer-43541732\nurl = \"http://host.docker.internal:8000\"\n\nEnsure also that both ‘auth’ and ‘puhuri’ are disabled, and environment is set to ‘development’ in mss-config.toml\n\n[general]\nenvironment = \"development\"\n\n[auth]\nis_enabled = false\n\n[puhuri]\nis_enabled = false\n\nCreate a mongo database, say “testing”, probably using mongo compass.\nInsert the following document in the “backends” collection in the “testing” database in your mongo database.\n\n{\n  \"_id\": {\n    \"$oid\": \"664756593b639968c2d3df24\"\n  },\n  \"name\": \"loke\",\n  \"characterized\": true,\n  \"open_pulse\": true,\n  \"timelog\": {\n    \"REGISTERED\": \"2023-11-15T16:36:17.474815\",\n    \"LAST_UPDATED\": \"2023-11-15T15:41:51.528Z\"\n  },\n  \"version\": \"2024.04.0\",\n  \"num_qubits\": 5,\n  \"num_couplers\": 8,\n  \"num_resonators\": 5,\n  \"dt\": 1e-9,\n  \"dtm\": 1e-9,\n  \"meas_map\": [\n    [\n      0,\n      1,\n      2,\n      3,\n      4\n    ]\n  ],\n  \"coupling_map\": [\n    [\n      0,\n      2\n    ],\n    [\n      2,\n      0\n    ],\n    [\n      1,\n      2\n    ],\n    [\n      2,\n      1\n    ],\n    [\n      2,\n      3\n    ],\n    [\n      3,\n      2\n    ],\n    [\n      2,\n      4\n    ],\n    [\n      4,\n      2\n    ]\n  ],\n  \"device_properties\": {\n    \"qubit\": [\n      {\n        \"frequency\": 4511480043.556283,\n        \"pi_pulse_amplitude\": 0.17555712637424228,\n        \"pi_pulse_duration\": 5.6e-8,\n        \"pulse_sigma\": 7e-9,\n        \"pulse_type\": \"Gaussian\",\n        \"t1_decoherence\": 0.000034,\n        \"t2_decoherence\": 0.000033,\n        \"id\": 0\n      },\n      {\n        \"frequency\": 4677112343.360253,\n        \"pi_pulse_amplitude\": 0.17535338530538067,\n        \"pi_pulse_duration\": 5.6e-8,\n        \"pulse_sigma\": 7e-9,\n        \"pulse_type\": \"Gaussian\",\n        \"t1_decoherence\": 0.000034,\n        \"t2_decoherence\": 0.000033,\n        \"id\": 1\n      },\n      {\n        \"frequency\": 5770226599.80365,\n        \"pi_pulse_amplitude\": 0.17873594718151276,\n        \"pi_pulse_duration\": 5.6e-8,\n        \"pulse_sigma\": 7e-9,\n        \"pulse_type\": \"Gaussian\",\n        \"t1_decoherence\": 0.000034,\n        \"t2_decoherence\": 0.000033,\n        \"id\": 2\n      },\n      {\n        \"frequency\": 6856217811.995201,\n        \"pi_pulse_amplitude\": 0.17326197853513559,\n        \"pi_pulse_duration\": 5.6e-8,\n        \"pulse_sigma\": 7e-9,\n        \"pulse_type\": \"Gaussian\",\n        \"t1_decoherence\": 0.000034,\n        \"t2_decoherence\": 0.000033,\n        \"id\": 3\n      },\n      {\n        \"frequency\": 6701096836.557067,\n        \"pi_pulse_amplitude\": 0.16948867103728774,\n        \"pi_pulse_duration\": 5.6e-8,\n        \"pulse_sigma\": 7e-9,\n        \"pulse_type\": \"Gaussian\",\n        \"t1_decoherence\": 0.000034,\n        \"t2_decoherence\": 0.000033,\n        \"id\": 4\n      }\n    ],\n    \"readout_resonator\": [\n      {\n        \"acq_delay\": 5e-8,\n        \"acq_integration_time\": 0.000001,\n        \"frequency\": {\n          \"$numberLong\": \"7260080000\"\n        },\n        \"pulse_delay\": 0,\n        \"pulse_duration\": 9e-7,\n        \"pulse_type\": \"Square\",\n        \"pulse_amplitude\": 0.1266499392606423,\n        \"lda_parameters\": {\n          \"twoState\": {\n            \"score\": 0.985,\n            \"coef\": [\n              [\n                -98953.87504155144,\n                -114154.48696231026\n              ]\n            ],\n            \"intercept\": [\n              -38.4344477840827\n            ]\n          },\n          \"threeState\": {\n            \"score\": 0.9580015923566879,\n            \"coef\": [\n              [\n                67556.81859745766,\n                71505.66931668088\n              ],\n              [\n                -14142.401380443791,\n                -68814.26719610114\n              ],\n              [\n                -104325.0336269802,\n                -5256.644766757276\n              ]\n            ],\n            \"intercept\": [\n              18.888335231525723,\n              -21.898486762901555,\n              -33.556356307556854\n            ]\n          }\n        },\n        \"id\": 0\n      },\n      {\n        \"acq_delay\": 5e-8,\n        \"acq_integration_time\": 0.000001,\n        \"frequency\": {\n          \"$numberLong\": \"7380000000\"\n        },\n        \"pulse_delay\": 0,\n        \"pulse_duration\": 9e-7,\n        \"pulse_type\": \"Square\",\n        \"pulse_amplitude\": 0.12660078572926436,\n        \"lda_parameters\": {\n          \"twoState\": {\n            \"score\": 0.987,\n            \"coef\": [\n              [\n                -107941.00358803963,\n                -124239.32054386326\n              ]\n            ],\n            \"intercept\": [\n              -42.05181160328822\n            ]\n          },\n          \"threeState\": {\n            \"score\": 0.9589968152866242,\n            \"coef\": [\n              [\n                74144.78052369223,\n                80219.75345675235\n              ],\n              [\n                -20263.355831418605,\n                -73050.73707640498\n              ],\n              [\n                -105237.1576020969,\n                -14001.985117865986\n              ]\n            ],\n            \"intercept\": [\n              21.107115767442064,\n              -24.401897244641916,\n              -36.12273520392597\n            ]\n          }\n        },\n        \"id\": 1\n      },\n      {\n        \"acq_delay\": 5e-8,\n        \"acq_integration_time\": 0.000001,\n        \"frequency\": {\n          \"$numberLong\": \"7502000000\"\n        },\n        \"pulse_delay\": 0,\n        \"pulse_duration\": 9e-7,\n        \"pulse_type\": \"Square\",\n        \"pulse_amplitude\": 0.08245560237524203,\n        \"lda_parameters\": {\n          \"twoState\": {\n            \"score\": 0.9905,\n            \"coef\": [\n              [\n                -191087.42493249022,\n                -20803.06874845618\n              ]\n            ],\n            \"intercept\": [\n              -22.684588212281916\n            ]\n          },\n          \"threeState\": {\n            \"score\": 0.9301353503184714,\n            \"coef\": [\n              [\n                117698.79312336461,\n                1323.6059974854222\n              ],\n              [\n                -73571.40229985592,\n                -28205.57304588287\n              ],\n              [\n                -86186.31020216543,\n                52503.84189140131\n              ]\n            ],\n            \"intercept\": [\n              8.616211460736217,\n              -14.506319082756788,\n              -15.607187419129968\n            ]\n          }\n        },\n        \"id\": 2\n      },\n      {\n        \"acq_delay\": 5e-8,\n        \"acq_integration_time\": 0.000001,\n        \"frequency\": {\n          \"$numberLong\": \"7712000000\"\n        },\n        \"pulse_delay\": 0,\n        \"pulse_duration\": 9e-7,\n        \"pulse_type\": \"Square\",\n        \"pulse_amplitude\": 0.04188729430238,\n        \"lda_parameters\": {\n          \"twoState\": {\n            \"score\": 0.8735,\n            \"coef\": [\n              [\n                -29474.17108465108,\n                78360.1067777809\n              ]\n            ],\n            \"intercept\": [\n              -1.933795064413808\n            ]\n          },\n          \"threeState\": {\n            \"score\": 0.7563694267515924,\n            \"coef\": [\n              [\n                9107.496591845296,\n                -51304.48625833322\n              ],\n              [\n                -21037.874286196384,\n                28857.813926275605\n              ],\n              [\n                23301.518934279466,\n                43841.15689855003\n              ]\n            ],\n            \"intercept\": [\n              -0.42091088440579094,\n              -2.3990628805824983,\n              -3.202495936672423\n            ]\n          }\n        },\n        \"id\": 3\n      },\n      {\n        \"acq_delay\": 5e-8,\n        \"acq_integration_time\": 0.000001,\n        \"frequency\": {\n          \"$numberLong\": \"7871000000\"\n        },\n        \"pulse_delay\": 0,\n        \"pulse_duration\": 9e-7,\n        \"pulse_type\": \"Square\",\n        \"pulse_amplitude\": 0.05844291534543274,\n        \"lda_parameters\": {\n          \"twoState\": {\n            \"score\": 0.96375,\n            \"coef\": [\n              [\n                -106998.96952984166,\n                66774.10489889105\n              ]\n            ],\n            \"intercept\": [\n              -6.6282190356967075\n            ]\n          },\n          \"threeState\": {\n            \"score\": 0.8578821656050956,\n            \"coef\": [\n              [\n                60709.720254705426,\n                -51675.5747833689\n              ],\n              [\n                -49881.622682824636,\n                16479.42339459183\n              ],\n              [\n                -21148.62807007965,\n                68742.48318120521\n              ]\n            ],\n            \"intercept\": [\n              1.4575641967873554,\n              -5.385810943207904,\n              -6.329888946815834\n            ]\n          }\n        },\n        \"id\": 4\n      }\n    ],\n    \"coupler\": [\n      {}\n    ]\n  },\n  \"discriminators\": {\n    \"lda\": {\n      \"q0\": {\n        \"score\": 0.985,\n        \"intercept\": -38.4344477840827,\n        \"coef_0\": -98953.87504155144,\n        \"coef_1\": -114154.48696231026\n      },\n      \"q1\": {\n        \"score\": 0.987,\n        \"intercept\": -42.05181160328822,\n        \"coef_0\": -107941.00358803963,\n        \"coef_1\": -124239.32054386326\n      },\n      \"q2\": {\n        \"score\": 0.9905,\n        \"intercept\": -22.684588212281916,\n        \"coef_0\": -191087.42493249022,\n        \"coef_1\": -20803.06874845618\n      },\n      \"q3\": {\n        \"score\": 0.8735,\n        \"intercept\": -1.933795064413808,\n        \"coef_0\": -29474.17108465108,\n        \"coef_1\": 78360.1067777809\n      },\n      \"q4\": {\n        \"score\": 0.96375,\n        \"intercept\": -6.6282190356967075,\n        \"coef_0\": -106998.96952984166,\n        \"coef_1\": 66774.10489889105\n      }\n    }\n  },\n  \"qubit_ids\": [\n    \"q0\",\n    \"q1\",\n    \"q2\",\n    \"q3\",\n    \"q4\"\n  ],\n  \"description\": \"Backend for the simulator supporting qiskit-connector parsing for the release 2024.3\"\n}\n\nUpdate your database configuration in the mss-config.toml file to:\n\n[database]\n# assuming the database name is \"testing\"\nname = \"testing\"\n# assuming that mongodb is running on your local machine\n# host.docker.internal resolves to the host's 127.0.0.1 when running on docker\nurl = \"http://host.docker.internal:27017\"\n\nCreate a .env file basing on the .env.example file. Update the variables therein appropriately.\n\ncp .env.example .env\n\nTo rebuild and run the services, use the fresh-docker-compose.yml.\n\ndocker compose -f fresh-docker-compose.yml up -d\nNote: If you ever want the images rebuilt after this initial run, you have to change the app version numbers in the .env file and rerun the above command\nMSS_VERSION=v0.0.2 # originally v0.0.1\nWEBGUI_VERSION=v0.0.2 # originally v0.0.1\nLANDING_PAGE_VERSION=v0.0.2 # originally v0.0.1\n\nOpen your browser at\n\nhttp://localhost:8030 to see the landing page\nhttp://localhost:8002 to see the MSS service\nhttp://localhost:3000 to see the webGUI application\n\nTo stop the services, run:\n\ndocker compose -f fresh-docker-compose.yml stop\n\nTo remove stop the services and remove their containers also, run:\n\ndocker compose -f fresh-docker-compose.yml down\n\nTo view logs of the docker containers to catch some errors, use:\n\n# see more at https://docs.docker.com/reference/cli/docker/compose/logs/\ndocker compose logs -f",
    "crumbs": [
      "Quick Start"
    ]
  },
  {
    "objectID": "quick_start.html#run-an-experiment",
    "href": "quick_start.html#run-an-experiment",
    "title": "Quick Start",
    "section": "Run an Experiment",
    "text": "Run an Experiment\n\nCreate conda environment\n\nconda create -n terg -y python=3.9\nconda activate terg\n\nInstall qiskit and tergite SDK\n\npip install qiskit\npip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple tergite\n\nCreate a python script main.py and add the code below. Update the variables there in.\n\n# main.py\n\"\"\"A sample script doing a very simple quantum operation\"\"\"\nimport time\n\nimport qiskit.circuit as circuit\nimport qiskit.compiler as compiler\n\nfrom tergite.qiskit.providers import Job, Tergite\nfrom tergite.qiskit.providers.provider_account import ProviderAccount\n\nif __name__ == \"__main__\":\n    # the Tergite API URL\n    API_URL = \"http://localhost:8002\"\n    # API token for connecting to tergite\n    API_TOKEN = \"&lt;your Tergite API key &gt;\"\n    # The name of the Quantum Computer to use from the available quantum computers\n    BACKEND_NAME = \"loke\"\n    # the name of this service. For your own bookkeeping.\n    SERVICE_NAME = \"local\"\n    # the timeout in seconds for how long to keep checking for results\n    POLL_TIMEOUT = 100\n\n    # create the Qiskit circuit\n    qc = circuit.QuantumCircuit(1)\n    qc.x(0)\n    qc.h(0)\n    qc.measure_all()\n\n    # create a provider\n    # provider account creation can be skipped in case you already saved\n    # your provider account to the `~/.qiskit/tergiterc` file.\n    # See below how that is done.\n    account = ProviderAccount(service_name=SERVICE_NAME, url=API_URL, token=API_TOKEN)\n    provider = Tergite.use_provider_account(account)\n    # to save this account to the `~/.qiskit/tergiterc` file, add the `save=True`\n    # provider = Tergite.use_provider_account(account, save=True)\n\n    # Get the tergite backend in case you skipped provider account creation\n    # provider = Tergite.get_provider(service_name=SERVICE_NAME)\n    backend = provider.get_backend(BACKEND_NAME)\n    backend.set_options(shots=1024)\n\n    # compile the circuit\n    tc = compiler.transpile(qc, backend=backend)\n\n    # run the circuit\n    job: Job = backend.run(tc, meas_level=2, meas_return=\"single\")\n\n    # view the results\n    elapsed_time = 0\n    result = None\n    while result is None:\n        if elapsed_time &gt; POLL_TIMEOUT:\n            raise TimeoutError(\n                f\"result polling timeout {POLL_TIMEOUT} seconds exceeded\"\n            )\n\n        time.sleep(1)\n        elapsed_time += 1\n        result = job.result()\n\n    print(result.get_counts())\n\nRun the above script with\n\npython main.py\n\nIt should return something like (because we are using the dummy cluster from quantify scheduler):\n\n{0: 1024}",
    "crumbs": [
      "Quick Start"
    ]
  },
  {
    "objectID": "why.html",
    "href": "why.html",
    "title": "Why tergite?",
    "section": "",
    "text": "TODO\n\n\n\n Back to top"
  },
  {
    "objectID": "contributing/guidelines.html",
    "href": "contributing/guidelines.html",
    "title": "Contributing to tergite",
    "section": "",
    "text": "This project is currently not accepting pull requests from the general public yet.\nIt is currently being developed by the core developers only.\nWe love your input! We want to make contributing to this project as easy and transparent as possible, whether it’s:\n\nReporting a bug\nDiscussing the current state of the code\nSubmitting a fix\nProposing new features\nBecoming a maintainer\n\n\n\nChalmers Next Labs AB (CNL) manages and maintains this project on behalf of all contributors.\n\n\n\nTergite is developed on a separate version control system and mirrored on Github. If you are reading this on GitHub, then you are looking at a mirror.\n\n\n\nSince the Github repositories are only mirrors, no Github pull requests or Github issue/bug reports are looked at. Please get in touch via email quantum.nextlabs@chalmers.se instead.\nTake note that the maintainers may not answer every email.\n\n\n\nPull requests are the best way to propose changes to the codebase (we use Github Flow). We actively welcome your pull requests:\n\nClone the repo and create your branch from main.\nIf you’ve added code that should be tested, add tests.\nIf you’ve changed APIs, update the documentation.\nEnsure the test suite passes.\nMake sure your code lints.\nIssue that pull request!\n\n\n\n\nIn short, when you submit code changes, your submissions are understood to be under the same Apache 2.0 License that covers the project. Feel free to contact the maintainers if that’s a concern.\n\n\n\nThis is an example. Here’s another example from Craig Hockenberry.\nGreat Bug Reports tend to have:\n\nA quick summary and/or background\nSteps to reproduce\n\nBe specific!\nGive sample code if you can.\n\nWhat you expected would happen\nWhat actually happens\nNotes (possibly including why you think this might be happening, or stuff you tried that didn’t work)\n\nPeople love thorough bug reports. I’m not even kidding.\n\n\n\nBy contributing, you agree that your contributions will be licensed under its Apache 2.0 License.\n\n\n\nBefore you can submit any code, all contributors must sign a contributor license agreement (CLA). By signing a CLA, you’re attesting that you are the author of the contribution, and that you’re freely contributing it under the terms of the Apache-2.0 license.\n“The individual CLA document is available for review as a PDF.\nPlease note that if your contribution is part of your employment or your contribution is the property of your employer, you will also most likely need to sign a corporate CLA.\nAll signed CLAs are emails to us at quantum.nextlabs@chalmers.se.”\n\n\n\nThis document was adapted from a gist by Brian A. Danielak which was originally adapted from the open-source contribution guidelines for Facebook’s Draft",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#government-model",
    "href": "contributing/guidelines.html#government-model",
    "title": "Contributing to tergite",
    "section": "",
    "text": "Chalmers Next Labs AB (CNL) manages and maintains this project on behalf of all contributors.",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#version-control",
    "href": "contributing/guidelines.html#version-control",
    "title": "Contributing to tergite",
    "section": "",
    "text": "Tergite is developed on a separate version control system and mirrored on Github. If you are reading this on GitHub, then you are looking at a mirror.",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#contacting-the-tergite-developers",
    "href": "contributing/guidelines.html#contacting-the-tergite-developers",
    "title": "Contributing to tergite",
    "section": "",
    "text": "Since the Github repositories are only mirrors, no Github pull requests or Github issue/bug reports are looked at. Please get in touch via email quantum.nextlabs@chalmers.se instead.\nTake note that the maintainers may not answer every email.",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#but-we-use-github-flow-so-all-code-changes-happen-through-pull-requests",
    "href": "contributing/guidelines.html#but-we-use-github-flow-so-all-code-changes-happen-through-pull-requests",
    "title": "Contributing to tergite",
    "section": "",
    "text": "Pull requests are the best way to propose changes to the codebase (we use Github Flow). We actively welcome your pull requests:\n\nClone the repo and create your branch from main.\nIf you’ve added code that should be tested, add tests.\nIf you’ve changed APIs, update the documentation.\nEnsure the test suite passes.\nMake sure your code lints.\nIssue that pull request!",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#any-contributions-you-make-will-be-under-the-apache-2.0-software-licenses",
    "href": "contributing/guidelines.html#any-contributions-you-make-will-be-under-the-apache-2.0-software-licenses",
    "title": "Contributing to tergite",
    "section": "",
    "text": "In short, when you submit code changes, your submissions are understood to be under the same Apache 2.0 License that covers the project. Feel free to contact the maintainers if that’s a concern.",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#write-bug-reports-with-detail-background-and-sample-code",
    "href": "contributing/guidelines.html#write-bug-reports-with-detail-background-and-sample-code",
    "title": "Contributing to tergite",
    "section": "",
    "text": "This is an example. Here’s another example from Craig Hockenberry.\nGreat Bug Reports tend to have:\n\nA quick summary and/or background\nSteps to reproduce\n\nBe specific!\nGive sample code if you can.\n\nWhat you expected would happen\nWhat actually happens\nNotes (possibly including why you think this might be happening, or stuff you tried that didn’t work)\n\nPeople love thorough bug reports. I’m not even kidding.",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#license",
    "href": "contributing/guidelines.html#license",
    "title": "Contributing to tergite",
    "section": "",
    "text": "By contributing, you agree that your contributions will be licensed under its Apache 2.0 License.",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#contributor-licensing-agreement",
    "href": "contributing/guidelines.html#contributor-licensing-agreement",
    "title": "Contributing to tergite",
    "section": "",
    "text": "Before you can submit any code, all contributors must sign a contributor license agreement (CLA). By signing a CLA, you’re attesting that you are the author of the contribution, and that you’re freely contributing it under the terms of the Apache-2.0 license.\n“The individual CLA document is available for review as a PDF.\nPlease note that if your contribution is part of your employment or your contribution is the property of your employer, you will also most likely need to sign a corporate CLA.\nAll signed CLAs are emails to us at quantum.nextlabs@chalmers.se.”",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "contributing/guidelines.html#references",
    "href": "contributing/guidelines.html#references",
    "title": "Contributing to tergite",
    "section": "",
    "text": "This document was adapted from a gist by Brian A. Danielak which was originally adapted from the open-source contribution guidelines for Facebook’s Draft",
    "crumbs": [
      "Contributing",
      "Contributing to tergite"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tergite",
    "section": "",
    "text": "Why tergite?\n  \n  \n    \n     Quick Start\n  \n  \n    \n     GitHub"
  },
  {
    "objectID": "index.html#structure",
    "href": "index.html#structure",
    "title": "Tergite",
    "section": "Structure",
    "text": "Structure\n\n\nComponents\nThe tergite stack is composed of three components\n\ntergite-backend\n\nThe operating system of the quantum computer. It communicates with the world via a RESTful API.\n\ntergite-frontend\n\nThe server that gives remote access to any tergite-backend instance. It communicates with the world via a RESTful API.\n\ntergite SDK (or just tergite)\n\nThe Python software development kit (SDK) quantum computer researchers can use in their scripts to interact with the tergite stack.\n\n\n\n\nAccessories\nThe tergite stack has a number of accessory softwares that are currently not initmately woven into the stack but mught be in future\n\ntergite-autocalibration\n\nThe Python commandline application (CLI) that is used to automatically tune the quantum computer.\n\n\n\n\nLanguage of Communication\nWe use OpenPulse to communicate pass quantum computer instructions from the SDK to the backend part of the tergite stack."
  },
  {
    "objectID": "index.html#developmment",
    "href": "index.html#developmment",
    "title": "Tergite",
    "section": "Developmment",
    "text": "Developmment\nThis project is developed by a core group of collaborators. Chalmers Next Labs AB (CNL) takes on the role of managing and maintaining this project.\n\nContributors\nWe are grateful for the wonderful contributions from:\n\nChalmers Next Labs AB - Quantum Division\nChalmers University of Technology - Microtechnology and Nanoscience department\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSponsors\n\nKnut and Alice Wallenburg Foundation under the Wallenberg Center for Quantum Technology (WAQCT) project at Chalmers University of Technology\nNordic e-Infrastructure Collaboration (NeIC) and NordForsk under the NordIQuEst project\nEuropean Union’s Horizon Europe under the OpenSuperQ project\nEuropean Union’s Horizon Europe under the OpenSuperQPlus project"
  }
]